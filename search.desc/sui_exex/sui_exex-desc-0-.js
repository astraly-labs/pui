searchState.loadedDescShard("sui_exex", 0, "Execution Extensions.\nCaptures the context that an <code>ExEx</code> has access to.\nChannel used to send <code>ExExEvent</code>s to the rest of the node.\nReturns the argument unchanged.\nReturns the highest checkpoint known by the network. …\nCalls <code>U::from(self)</code>.\nChannel to receive [<code>ExExNotification</code>]s.\nHandle to the StateSync subsystem. Used to retrieve the …\nEvents emitted by an <code>ExEx</code>.\nTODO: This should probably be renamed. Is “Height” the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA head of the ExEx. It contains the highest host block …\nThe finished height of all <code>ExEx</code>’s.\nThe finished height of all <code>ExEx</code>’s.\nNo <code>ExEx</code>’s are installed, so there is no finished height.\nNot all <code>ExExs</code> have emitted a <code>FinishedHeight</code> event yet.\nThe head block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if not all <code>ExExs</code> have emitted a <code>FinishedHeight</code>…\nA boxed exex future.\nA version of <code>LaunchExEx</code> that returns a boxed future. Makes …\nA trait for launching an <code>ExEx</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLaunches the <code>ExEx</code>.\nLaunches the <code>ExEx</code> and returns a boxed future.\nLaunches all execution extensions.\nCreate a new <code>ExExLauncher</code> with the given extensions.\nA handle to an <code>ExEx</code> used by the <code>ExExManager</code> to communicate …\nThe execution extension manager.\nA handle to communicate with the <code>ExExManager</code>.\nGet the current capacity of the <code>ExEx</code> manager’s internal …\nHandles to communicate with the <code>ExEx</code>’s.\nThe finished height of all <code>ExEx</code>’s.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the handle to the manager.\n<code>ExExNotification</code> channel from the <code>ExExManagerHandle</code>s.\nWhether there is capacity in the <code>ExEx</code> manager’s internal …\nReturns <code>true</code> if there are <code>ExEx</code>’s installed in the node.\nThe execution extension’s ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ExExManager</code>.\nMain loop of the <code>ExExManager</code>. The order of operations is …\nWait until the manager is ready for new notifications.\nPushes a new notification into the managers internal …\nWait until the manager is ready for new notifications.\nSynchronously send a notification over the channel to all …\nAsynchronously send a notification over the channel to all …\nChannel to send <code>ExExNotification</code>s to the <code>ExEx</code>.\nA new checkpoint got synced by the full node.\nNotifications sent to an <code>ExEx</code>.\nA stream of <code>ExExNotification</code>s. The stream will emit …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>ExExNotifications</code>.\nA trait to allow polling a future exactly once\nTest handle for controlling and asserting on ExEx behavior\nAssert that a FinishedHeight event was emitted with the …\nAssert that no events have been emitted\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPoll the future exactly once. Returns Ok(()) if the future …\nSend a checkpoint synced notification\nCreates a test context for ExEx with all required …\n<code>ToString::to_string</code>, but without panic on OOM.")